function varargout = GeoSolver(varargin)
%GUI Initialization -- Automatically generated by Matlab
%===============================================================
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GeoSolver_OpeningFcn, ...
                   'gui_OutputFcn',  @GeoSolver_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

function GeoSolver_OpeningFcn(hObject, eventdata, handles, varargin)
%This defines relative path locations and main workspace on open
%===============================================================

% Code just for Windows!! If run on Mac, line 5 must be changed to
% 'Functions/' not 'Functions\'
root_path = strrep(mfilename('fullpath'),mfilename,'');
functions_path = [root_path 'Functions\'];
addpath(functions_path);
set(handles.defineMaterials,'enable','off')
set(handles.beginAnalysis,'enable','off')
set(handles.boundaryConditions,'visible','off')
handles.output = hObject;
guidata(hObject, handles);
showNodeNums=0; %default - don't show node #s
showElNums=0; %default - don't show element #s
assignin('base','showNodeNums',showNodeNums);
assignin('base','showElNums',showElNums);

function openMeshpath_Callback(hObject, eventdata, handles)
%This controls what happens on button press for the 'Open' button
%================================================================
    %This section of code will read in a mesh from a text file. It 
    %will then draw and label the mesh, then search for boundary
    %conditions. Boundary conditions are then plotted on the figure as
    %squares for zero displacement and triangles for zero force. By
    %clicking the button, the boundary conditions and define materials
    %options appear. 
    %Outputs: List of node coordinates, list of elements, dx,dy,fx,fy
    %boundary conditions.
    
%Get mesh file from user
[fileName,pathName] = uigetfile('*.txt');
address = strcat(pathName, fileName);
set(handles.meshFilepath,'String',address)

%Run input input function to translate .txt to matrices
[node_coords,incidences,excavations] = TextFileInput(address);
%Create axes and run draw function to display mesh and boundary conditions
axes(handles.meshDisplay)
Draw(node_coords,incidences,handles.meshDisplay,0,0)
BCxmin=min(node_coords(:,1));
BCxmax=max(node_coords(:,1));
BCymin=min(node_coords(:,2));
BCymax=max(node_coords(:,2));
set(handles.BCxmin,'String',BCxmin);
set(handles.BCxmax,'String',BCxmax);
set(handles.BCymin,'String',BCymin);
set(handles.BCymax,'String',BCymax);
[fx_set, fy_set,f,u] = defineBoundaryConditions(node_coords,BCxmin,BCxmax,BCymin,BCymax,handles.meshDisplay );
%Update GUI
set(handles.numNodeout,'String',length(node_coords(:,1)))
set(handles.numElout,'String',length(incidences(:,1)))
set(handles.boundaryConditions,'visible','on')
set(handles.defineMaterials,'enable','on')
set(handles.showElNum,'enable','on')
set(handles.showNodeNum,'enable','on')
%Output variables to Matlab.
assignin('base','node_coords',node_coords); 
assignin('base','incidences',incidences);
assignin('base','excavations',excavations);
assignin('base','fx_set',fx_set);
assignin('base','fy_set',fy_set);
assignin('base','f',f);
assignin('base','u',u);

function beginAnalysis_Callback(hObject, eventdata, handles)
%Upon click of the "Begin Analysis" button
%=========================================
    %This section of code defines the element, then global stiffness
    %matrices for the mesh. Then using the global matrix, and the boundary
    %conditions defined earlier the system of equations is solved using the
    %partitioning method.
    %Outputs: Element and global stiffness matrices, vector of resovled
    %displacements and vector of resolved forces.
    
incidences = evalin('base','incidences');
node_coords = evalin('base','node_coords');
Element_Param = evalin('base','Element_Param');
fx_set = evalin('base','fx_set');
fy_set = evalin('base','fy_set');
unit_weight = evalin('base','Gamma');
f = evalin('base','f');
u = evalin('base','u');
t=1; %thickness
n_el = length(incidences(:,1));
n_nodes = length(node_coords(:,1));
element_stiffness_matrices=zeros(6,6,n_el);

%Populate element stiffness matrices in a matrix of dimensions 6x6x(#nodes)
for i=1:n_el
    %vectors for x and y coordinates for nodes i,j,m
    ii=node_coords(incidences(i,1),:);
    jj=node_coords(incidences(i,2),:);
    mm=node_coords(incidences(i,3),:);
    E=Element_Param(i,1);
    nue=Element_Param(i,2);
    %pass coordinate vectors of each node for the current element to
    %determine element stiffness matrix
    element_stiffness_matrices(:,:,i) = ElementStiffnessMatrix(ii,jj,mm,E,nue,t);
end

%Call function to return global stiffness matrix
global_stiffness_matrix = GlobalStiffnessMatrix(element_stiffness_matrices,incidences,n_nodes,n_el);

%Calculate body forces
f_body=calcInitialForces(unit_weight,t,node_coords,incidences); %must integrate this into code
f=f.*f_body;
%Call function to solve with partitioning
[f_solved, u_solved,err] = Solve_With_Partitioning(global_stiffness_matrix,fx_set,fy_set,f,u,length(node_coords(:,1)));
%Output variables to Matlab
assignin('base','element_stiffness_matrices',element_stiffness_matrices);
assignin('base','global_stiffness_matrix',global_stiffness_matrix);
assignin('base','f_solved',f_solved);
assignin('base','u_solved',u_solved);
assignin('base','err',err);
finiteElementResults

function defineMaterials_Callback(hObject, eventdata, handles)
% Executes on button press in defineMaterials
%===============================================================
defineMaterialProperties
set(handles.beginAnalysis,'enable','on')

%Automatically generated code for GUI components
%===============================================================
%===============================================================
function varargout = GeoSolver_OutputFcn(hObject, eventdata, handles) 
varargout{1} = handles.output;
function mainTitle_CreateFcn(hObject, eventdata, handles)
function meshDisplay_CreateFcn(hObject, eventdata, handles)
function meshFilepath_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function meshFilepath_Callback(hObject, eventdata, handles)
function background_CreateFcn(hObject, eventdata, handles)
axes(hObject)
imshow('background.png')
function BCxmin_Callback(hObject, eventdata, handles)
function BCxmin_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BCxmax_Callback(hObject, eventdata, handles)
function BCxmax_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BCymin_Callback(hObject, eventdata, handles)
function BCymin_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BCymax_Callback(hObject, eventdata, handles)
function BCymax_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in showElNum.
function showElNum_Callback(hObject, eventdata, handles)
% show Element #s in the Draw() function
showElNums=get(hObject,'Value');
showNodeNums=evalin('base','showNodeNums');
incidences=evalin('base','incidences');
node_coords=evalin('base','node_coords');
cla reset;
Draw(node_coords,incidences,handles.meshDisplay,showElNums,showNodeNums)
assignin('base','showElNums',showElNums);


% --- Executes on button press in showNodeNum.
function showNodeNum_Callback(hObject, eventdata, handles)
% show node #s in the Draw() function
showNodeNums=get(hObject,'Value');
showElNums=evalin('base','showElNums');
incidences=evalin('base','incidences');
node_coords=evalin('base','node_coords');
cla reset;
Draw(node_coords,incidences,handles.meshDisplay,showElNums,showNodeNums)
assignin('base','showNodeNums',showNodeNums);
